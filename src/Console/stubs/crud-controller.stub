<?php

namespace DummyNamespace;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;

use DB;
use Validator;
use Yajra\DataTables\Datatables;
use Shagyt\lvcrud\Models\Module;
use Shagyt\lvcrud\Models\Field;
use Collective\Html\FormFacade as Form;
use App\Models\__ModelName__;

class __Class__Controller extends Controller
{
    function __construct() {
        $this->crud = Module::make('__Class__');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
		if($this->crud->hasAccess('list')) {
            
            $crud = $this->crud;
            $__smallPlural__ = __ModelName__::all();
            $crud->datatable = true;

            return view('admin.__ViewFolder__.index', [
                'crud' => $crud,
                '__smallPlural__' => $__smallPlural__
            ]);
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {
        if($this->crud->hasAccess('create')) {
            if(isset($request->src)) {
                $src = $request->src;
            } else {
                $src = Null;
            }
            
            $crud = $this->crud;

            return view('admin.__ViewFolder__.create', [
                'crud' => $crud,
                'src' => $src
            ]);
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if($this->crud->hasAccess('create')) {
            if (is_null($request)) {
                $request = \Request::instance();
            }
            
            $rules = Module::validateRules("__Class__", $request);
			$validator = Validator::make($request->all(), $rules);
			
			if ($validator->fails()) {
				return redirect()->back()->withErrors($validator)->withInput();
			}

            // replace empty values with NULL, so that it will work with MySQL strict mode on
            foreach ($request->input() as $key => $value) {
                if (empty($value) && $value !== '0') {
                    $request->request->set($key, null);
                }
            }

            // insert item in the db
            $item = $this->crud->create($request);
            $this->data['entry'] = $this->crud->entry = $item;

            // add activity log
            // \Activity::log(config('activity_log.context.CREATED'), $this->crud, ['new' => $item]);

            // show a success message
            if(!$request->src_ajax) {
                \Alert::success($this->crud->label." ".trans('crud.insert_success'))->flash();
            }

            if(isset($request->go_view) && $request->go_view) {
                return redirect($this->crud->route.'/'.$item->id);
            } else if(isset($request->src_ajax) && $request->src_ajax) {
                return response()->json(['status' => 'success', 'massage' => 'created', 'item' => $item]);
            } else if(isset($request->src)) {
                return redirect($request->src);
            } else {
                return redirect($this->crud->route);
            }
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request, $id)
    {
        if($this->crud->hasAccess('view')) {
            if(isset($request->src)) {
                $src = url($request->src);
            } else {
                $src = Null;
            }

            $__smallSingular__ = __ModelName__::withTrashed()->where('_id',$id)->first();
            if ((isset($__smallSingular__->id) && !(isset($__smallSingular__->deleted_at) && $__smallSingular__->deleted_at)) || (isset($__smallSingular__->deleted_at) && $__smallSingular__->deleted_at && \Auth::user()->isAdmin())) {

                $crud = $this->crud;
                $crud->datatable = true;
                $crud->row = $__smallSingular__;
            
                if(isset($request->get_data_ajax) && $request->get_data_ajax) {
                    return response()->json(['status' => 'success', 'massage' => 'updated', 'item' => $__smallSingular__]);
                } else {
                    return view('admin.__ViewFolder__.show', [
                        'crud' => $crud,
                        '__smallSingular__' => $__smallSingular__,
                        'src' => $src,
                        'represent_attr' => $crud->module->represent_attr
                    ]);
                }
            } else {
                if(isset($request->get_data_ajax) && $request->get_data_ajax) {
                    return response()->json(['status' => 'failed', 'massage' => trans('crud.data_not_found')]);
                } else {
                    return view('errors.404', [
                        'record_id' => $id,
                        'record_name' => ucfirst("__smallPlural__"),
                    ]);
                }
            }
        } else {
            if(isset($request->get_data_ajax) && $request->get_data_ajax) {
                return response()->json(['status' => 'failed', 'massage' => trans('crud.unauthorized_access')]);
            } else {
                abort(403, trans('crud.unauthorized_access'));
            }
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $request, $id)
    {
        if($this->crud->hasAccess('edit')) {
            if(isset($request->src)) {
                $src = $request->src;
            } else {
                $src = Null;
            }
            
            $__smallSingular__ = __ModelName__::find($id);
            if(isset($__smallSingular__->id)) {
                
                $crud = $this->crud;
                $crud->row = $__smallSingular__;
            
                return view('admin.__ViewFolder__.edit', [
                    'crud' => $crud,
                    '__smallSingular__' => $__smallSingular__,
                    'src' => $src
                ]);
            } else {
                return view('errors.404', [
                    'record_id' => $id,
                    'record_name' => ucfirst("__smallPlural__"),
                ]);
            }
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        if($this->crud->hasAccess('edit')) {
            // old data
            $old_item = __ModelName__::find($id);
            if(isset($old_item->id)) {
                if (is_null($request)) {
                    $request = \Request::instance();
                }

                $rules = Module::validateRules("__Class__", $request, true);
                $validator = Validator::make($request->all(), $rules);
                
                if ($validator->fails()) {
                    return redirect()->back()->withErrors($validator)->withInput();
                }

                // replace empty values with NULL, so that it will work with MySQL strict mode on
                foreach ($request->input() as $key => $value) {
                    if (empty($value) && $value !== '0') {
                        $request->request->set($key, null);
                    }
                }

                // update the row in the db
                $item = $this->crud->update($id, $request);
                $this->data['entry'] = $this->crud->entry = $item;

                // add activity log
                // \Activity::log(config('activity_log.context.UPDATED'), $this->crud, ['new' => $item, 'old' => $old_item]);

                // show a success message
                if(!$request->src_ajax) {
                    \Alert::success($this->crud->label." ".trans('crud.update_success'))->flash();
                }

                if(isset($request->src_ajax) && $request->src_ajax) {
                    return response()->json(['status' => 'success', 'massage' => 'updated', 'item' => $item]);
                } else if(isset($request->src)) {
                    return redirect($request->src);
                } else {
                    return redirect($this->crud->route);
                }
            } else {
                abort(403, trans('crud.data_not_found'));
            }
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function deleted_data()
    {
		if($this->crud->hasAccess('list') && \Auth::user()->isAdmin()) {
            
            $crud = $this->crud;
            $__smallPlural__ = __ModelName__::onlyTrashed()->get();
            $crud->onlyButton('restore');
            $crud->labelPlural = trans('crud.delete')." ".$crud->labelPlural;
            $crud->datatable = true;
            return view('admin.__ViewFolder__.index', [
                'crud' => $crud,
                '__smallPlural__' => $__smallPlural__,
                'btn_hide' => true
            ]);
        } else {
            abort(403, trans('crud.unauthorized_access'));
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $id)
    {
        if($this->crud->hasAccess('delete')) {
            // old data
            $old_item = __ModelName__::find($id);
            if(isset($old_item->id)) {
                $__smallSingular__ = __ModelName__::find($id)->delete();

                // add activity log
                // \Activity::log(config('activity_log.context.DELETED'), $this->crud, ['old' => $old_item]);
                
                if(isset($request->src_ajax) && $request->src_ajax) {
                    return response()->json(['status' => 'success', 'massage' => trans('crud.delete_confirmation_message')]);
                } else if(isset($request->src)) {
                    Alert::success(trans('crud.delete_confirmation_message'))->flash();
                    return redirect($request->src);
                } else {
                    Alert::success(trans('crud.delete_confirmation_message'))->flash();
                    // return redirect()->route(config('aquaspade.base.route_prefix') . '__smallPlural__');
                    return (string) $__smallSingular__;
                }
            } else {
                if(isset($request->src_ajax) && $request->src_ajax) {
                    return response()->json(['status' => 'failed', 'massage' => trans('crud.data_not_found')]);
                } else {
                    abort(403, trans('crud.data_not_found'));
                }
            }
        } else {
            if(isset($request->src_ajax) && $request->src_ajax) {
                return response()->json(['status' => 'failed', 'massage' => trans('crud.unauthorized_access')]);
            } else {
                abort(403, trans('crud.unauthorized_access'));
            }
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function restore(Request $request, $id)
    {
        if($this->crud->hasAccess('delete')) {
            // old data
            $old_item = __ModelName__::onlyTrashed()->find($id);
            if(isset($old_item->id)) {
                $__smallSingular__ = __ModelName__::onlyTrashed()->find($id)->restore();

                // add activity log
                // \Activity::log(config('activity_log.context.restore'), $this->crud, ['old' => $old_item]);
                
                if(isset($request->src_ajax) && $request->src_ajax) {
                    return response()->json(['status' => 'success', 'massage' => 'restore']);
                } else if(isset($request->src)) {
                    return redirect($request->src);
                } else {
                    // return redirect()->route(config('laraadmin.adminRoute') . 'crud.__smallPlural__.index');
                    return (string) $__smallSingular__;
                }
            } else {
                if(isset($request->src_ajax) && $request->src_ajax) {
                    return response()->json(['status' => 'failed', 'massage' => trans('crud.data_not_found')]);
                } else {
                    abort(403, trans('crud.data_not_found'));
                }
            }
        } else {
            if(isset($request->src_ajax) && $request->src_ajax) {
                return response()->json(['status' => 'failed', 'massage' => trans('crud.unauthorized_access')]);
            } else {
                abort(403, trans('crud.unauthorized_access'));
            }
        }
    }

    /**
     * Server side Datatable fetch via Ajax
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function datatable(Request $request)
    {
        $crud = $this->crud;
        $listing_cols = Module::getListingColumns('__Class__');
        
        if(isset($request->filter)) {
			$values = DB::table('__smallPlural__')->select($listing_cols)->whereNull('deleted_at')->where($request->filter);
		} else {
			$values = DB::table('__smallPlural__')->select($listing_cols)->whereNull('deleted_at');
		}
        
        $out = Datatables::of($values)->make();
        $data = $out->getData();
        
        $fields_popup = Field::getFields('__Class__');
        
        // array_splice($listing_cols, 2, 0, "index_name");
        
        for($i = 0; $i < count($data->data); $i++) {
            $data->data[$i] = collect($data->data[$i])->values()->all();
            $__smallSingular__ = __ModelName__::find($data->data[$i][0]);
            // array_splice($data->data[$i], 2, 0, true);
            for($j = 0; $j < count($listing_cols); $j++) {
                $col = $listing_cols[$j];
                if(isset($data->data[$i][$j]) && $data->data[$i][$j]) {
                    if(isset($fields_popup[$col])) {
                        $data->data[$i][$j] = \FormBuilder::get_field_value($crud, $col, $__smallSingular__->$col);
                    }
                    if($col == $crud->module->represent_attr && !isset($__smallSingular__->deleted_at)) {
                        $data->data[$i][$j] = '<a href="' . url($crud->route .'/'. $__smallSingular__->id) . '">' . $data->data[$i][$j] . '</a>';
                    }
                }
            }
            
            if ($crud->buttons->where('stack', 'line')->count()) {
                $crud->datatable = true;
                $output = '';
                
                $output .= \View::make('crud.inc.button_stack', ['stack' => 'line'])
                ->with('crud', $crud)
                ->with('entry', $__smallSingular__)
                ->render();

                $data->data[$i][] = (string)$output;
            }
        }
        $out->setData($data);
        return $out;
    }
}
